Provision::DSL;         -- DSL fÃ¼r "Scripte"
    Source              -- sources for file/dir contents
                        -- all file-classes have a method 'contents'
        Resource        -- resource base class
            File        -- for file copy
            Dir         -- for rsync
        Template        -- manipulate a file via TT
        URL             -- load a file from a given URL
            Http        -- http: protocol
            Ftp         -- ftp: protocol
    CheckIf             -- various check classes, ->is_ok
        Executes(s)     -- execute a script and report "OK" if status == 0
        FileExists(f|d) -- defaults to $self->path
        FileEquals(f,c) -- defaults to $self->path
        DirExists(d)    -- defaults to $self->path
        TreeMatches(d,tree)
        Runs(f)
    Entity              -- helpers, not directly deployable
        Simple          -- base class
            File        -- helper: file existence and contents
            Dir         -- helper: dir existence
            Stat        -- helper: permission
            Exec        -- helper: conditionally execute a script
        Compound        -- compound base class
    Deploy              ## fixme: bad name, these are exported as subs
        Group
            Ubuntu
            OSX
        User
            Ubuntu
            OSX
        Service
            Ubuntu
            OSX
        Execute
    Types               -- all Moose types we need


Execute '/path/to/script.sh' => (
    # only run if ... --> is_present is faked
    only_if => Executes('/path/to/other_script'),
    not_if  => FileExists('/path/to/other_script'),
    
    # only update if --> is_current is faked
    update_if => Runs('/...'),
    keep_if => TreeMatches(...),
);



Simple Entity:
  - name
  - parent
  - state
  - ... whatever is needed
  + is_ok($wanted)      # if state: 1, else 0
  + process($wanted)    # switches to state
  + create()            # for overloading
  + change()            # for overloading
  + remove()            # for overloading

    state           $wanted=0   $wanted=1
    -------------------------------------
    missing         -           create()
    outdated        remove()    change()
    current         remove()    -
    removed         -           create()    # should never happen!


Simple entities:
  - file + contents-generation (static, callback)
  - dir existence
  - path (file/dir) permission
  - package installed
  - service running


Compound Entity:
  - name
  - parent
  - children
  - state           # calculated from children
  + is_ok($wanted)
  + process($wanted)
  + create()
  + change()
  + remove()
  